name: Selenium Test Pipeline

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      selected_group:
        description: "Select the test group to run"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - dataset_registration
          - physical
          - virtual
          - end_to_end_flows
          - sql_to_azure
          - nas_to_azure
          - s3_to_azure

jobs:
  # Step 1: Test Data Check and Creation
  testDataCheckAndCreation:
    runs-on: windows-latest
    outputs:
      createTestData: ${{ steps.read-flag.outputs.createTestData }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install YAML Dependencies
        run: pip install pyyaml

      - name: Read createTestData Flag (PowerShell)
        id: read-flag
        shell: pwsh
        run: |
          $jsonContent = python -c "import yaml, json; print(json.dumps(yaml.safe_load(open('config.yaml'))))"
          $config = $jsonContent | ConvertFrom-Json
          echo "createTestData=$($config.createTestData)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Show Flag Value
        run: echo "createTestData is ${{ env.createTestData }}"

      - name: Install Dependencies
        if: env.createTestData == 'true'
        run: pip install -r requirements.txt

      - name: Run Test Data Generation (If Flag is True)
        if: env.createTestData == 'true'
        working-directory: metadata_driven
        run: python TestDataGenerationViaMetadata.py

      - name: List Generated Files
        run: dir metadata_driven

      - name: Upload Generated Test Data
        uses: actions/upload-artifact@v4
        with:
          name: generated-trade-data
          path: metadata_driven/trade_data_with_line_numbers.csv

  # Step 2: Test Case Execution
  testCaseExecution:
    needs: testDataCheckAndCreation
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-html

      - name: Determine Test Marker
        id: marker
        shell: pwsh
        run: |
          # Default to "all" if input is not provided (e.g., on push or PR)
          $group = "${{ github.event.inputs.selected_group }}"
          if ([string]::IsNullOrEmpty($group)) {
            $group = "all"
          }

          if ($group -eq "all") {
            echo "MARKER=" | Out-File -FilePath $env:GITHUB_ENV -Append
          } elseif ($group -eq "dataset_registration") {
            echo "MARKER=-m 'physical or virtual'" | Out-File -FilePath $env:GITHUB_ENV -Append
          } elseif ($group -eq "end_to_end_flows") {
            echo "MARKER=-m 'sql_to_azure or nas_to_azure or s3_to_azure'" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            echo "MARKER=-m $group" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Run Selected Tests by Marker
        shell: pwsh
        run: |
          if ([string]::IsNullOrEmpty("${{ env.MARKER }}")) {
            pytest tests/ --html=reports/test_report.html --self-contained-html
          } else {
            pytest tests/ ${{ env.MARKER }} --html=reports/test_report.html --self-contained-html
          }
      

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: selenium-test-report
          path: reports/test_report.html

  # Step 3: Data Reconciliation
  dataReconciliation:
    needs: testCaseExecution
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Run Data Reconciliation
        run: echo "Tests completed. You can add real data reconciliation logic here."
